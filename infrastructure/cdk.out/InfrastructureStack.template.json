{
 "Resources": {
  "WebsiteBucket75C24D94": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     },
     {
      "Key": "ForceUpdate",
      "Value": "2025-04-22T02:04:16.238Z"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/WebsiteBucket/Resource"
   }
  },
  "WebsiteBucketPolicyE10E3262": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "WebsiteBucket75C24D94"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "WebsiteBucket75C24D94",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WebsiteBucket75C24D94",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "OAIE1EFC67F",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "WebsiteBucket75C24D94",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WebsiteBucket75C24D94",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": "s3:GetObject",
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "OAIE1EFC67F",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": {
        "Fn::Join": [
         "",
         [
          {
           "Fn::GetAtt": [
            "WebsiteBucket75C24D94",
            "Arn"
           ]
          },
          "/*"
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/WebsiteBucket/Policy/Resource"
   }
  },
  "WebsiteBucketAutoDeleteObjectsCustomResource8750E461": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "WebsiteBucket75C24D94"
    }
   },
   "DependsOn": [
    "WebsiteBucketPolicyE10E3262"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/WebsiteBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-323399919537-us-east-2",
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "WebsiteBucket75C24D94"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "OAIE1EFC67F": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "Allows CloudFront to reach the bucket"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/OAI/Resource"
   }
  },
  "Distribution830FAC52": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "CustomErrorResponses": [
      {
       "ErrorCode": 404,
       "ResponseCode": 200,
       "ResponsePagePath": "/index.html"
      }
     ],
     "DefaultCacheBehavior": {
      "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
      "Compress": true,
      "TargetOriginId": "InfrastructureStackDistributionOrigin18128C7B5",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "DomainName": {
        "Fn::GetAtt": [
         "WebsiteBucket75C24D94",
         "RegionalDomainName"
        ]
       },
       "Id": "InfrastructureStackDistributionOrigin18128C7B5",
       "S3OriginConfig": {
        "OriginAccessIdentity": {
         "Fn::Join": [
          "",
          [
           "origin-access-identity/cloudfront/",
           {
            "Ref": "OAIE1EFC67F"
           }
          ]
         ]
        }
       }
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Distribution/Resource"
   }
  },
  "UserPool6BA7E5F2": {
   "Type": "AWS::Cognito::UserPool",
   "Properties": {
    "AccountRecoverySetting": {
     "RecoveryMechanisms": [
      {
       "Name": "verified_email",
       "Priority": 1
      }
     ]
    },
    "AdminCreateUserConfig": {
     "AllowAdminCreateUserOnly": false
    },
    "AutoVerifiedAttributes": [
     "email"
    ],
    "EmailVerificationMessage": "The verification code to your new account is {####}",
    "EmailVerificationSubject": "Verify your new account",
    "Policies": {
     "PasswordPolicy": {
      "MinimumLength": 8,
      "RequireLowercase": true,
      "RequireNumbers": true,
      "RequireSymbols": true,
      "RequireUppercase": true
     }
    },
    "SmsVerificationMessage": "The verification code to your new account is {####}",
    "UsernameAttributes": [
     "email"
    ],
    "VerificationMessageTemplate": {
     "DefaultEmailOption": "CONFIRM_WITH_CODE",
     "EmailMessage": "The verification code to your new account is {####}",
     "EmailSubject": "Verify your new account",
     "SmsMessage": "The verification code to your new account is {####}"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/UserPool/Resource"
   }
  },
  "UserPoolClient2F5918F7": {
   "Type": "AWS::Cognito::UserPoolClient",
   "Properties": {
    "AllowedOAuthFlows": [
     "implicit"
    ],
    "AllowedOAuthFlowsUserPoolClient": true,
    "AllowedOAuthScopes": [
     "profile",
     "phone",
     "email",
     "openid",
     "aws.cognito.signin.user.admin"
    ],
    "CallbackURLs": [
     {
      "Fn::Join": [
       "",
       [
        "https://",
        {
         "Fn::GetAtt": [
          "Distribution830FAC52",
          "DomainName"
         ]
        }
       ]
      ]
     },
     "http://localhost:3000"
    ],
    "ExplicitAuthFlows": [
     "ALLOW_USER_PASSWORD_AUTH",
     "ALLOW_USER_SRP_AUTH",
     "ALLOW_REFRESH_TOKEN_AUTH"
    ],
    "LogoutURLs": [
     {
      "Fn::Join": [
       "",
       [
        "https://",
        {
         "Fn::GetAtt": [
          "Distribution830FAC52",
          "DomainName"
         ]
        }
       ]
      ]
     },
     "http://localhost:3000"
    ],
    "PreventUserExistenceErrors": "ENABLED",
    "SupportedIdentityProviders": [
     "COGNITO"
    ],
    "UserPoolId": {
     "Ref": "UserPool6BA7E5F2"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/UserPoolClient/Resource"
   }
  },
  "UsersTable9725E9C8": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "userId",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "userId",
      "KeyType": "HASH"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/UsersTable/Resource"
   }
  },
  "RateLimitTableFAD921A1": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "key",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "key",
      "KeyType": "HASH"
     }
    ],
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/RateLimitTable/Resource"
   }
  },
  "TokensTable6C9B5BC6": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "tokenAddress",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "N"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "tokenAddress",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "timestamp",
      "KeyType": "RANGE"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/TokensTable/Resource"
   }
  },
  "PositionsTable41EA5B9F": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "userId",
      "AttributeType": "S"
     },
     {
      "AttributeName": "tokenAddress",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "userId",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "tokenAddress",
      "KeyType": "RANGE"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/PositionsTable/Resource"
   }
  },
  "ApiLambdaHandlerServiceRoleE309A3A0": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/ApiLambdaHandler/ServiceRole/Resource"
   }
  },
  "ApiLambdaHandlerServiceRoleDefaultPolicy534EEB6C": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "PositionsTable41EA5B9F",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "RateLimitTableFAD921A1",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "TokensTable6C9B5BC6",
          "Arn"
         ]
        },
        {
         "Fn::GetAtt": [
          "UsersTable9725E9C8",
          "Arn"
         ]
        },
        {
         "Ref": "AWS::NoValue"
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ApiLambdaHandlerServiceRoleDefaultPolicy534EEB6C",
    "Roles": [
     {
      "Ref": "ApiLambdaHandlerServiceRoleE309A3A0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/ApiLambdaHandler/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ApiLambdaHandlerCE925BB7": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-323399919537-us-east-2",
     "S3Key": "b3a87874f81c1b67bf3eb3996777b6f43d8ab196ed3dbf7ef057b22650bcad56.zip"
    },
    "Environment": {
     "Variables": {
      "USERS_TABLE": {
       "Ref": "UsersTable9725E9C8"
      },
      "TOKENS_TABLE": {
       "Ref": "TokensTable6C9B5BC6"
      },
      "POSITIONS_TABLE": {
       "Ref": "PositionsTable41EA5B9F"
      },
      "SOLANA_RPC_ENDPOINT": "https://api.mainnet-beta.solana.com"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerServiceRoleE309A3A0",
      "Arn"
     ]
    },
    "Runtime": "nodejs18.x"
   },
   "DependsOn": [
    "ApiLambdaHandlerServiceRoleDefaultPolicy534EEB6C",
    "ApiLambdaHandlerServiceRoleE309A3A0"
   ],
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/ApiLambdaHandler/Resource",
    "aws:asset:path": "asset.b3a87874f81c1b67bf3eb3996777b6f43d8ab196ed3dbf7ef057b22650bcad56",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "ApiLambdaHandlerLogRetention49B0CE2B": {
   "Type": "Custom::LogRetention",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
      "Arn"
     ]
    },
    "LogGroupName": {
     "Fn::Join": [
      "",
      [
       "/aws/lambda/",
       {
        "Ref": "ApiLambdaHandlerCE925BB7"
       }
      ]
     ]
    },
    "RetentionInDays": 7
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/ApiLambdaHandler/LogRetention/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:DeleteRetentionPolicy",
        "logs:PutRetentionPolicy"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "Roles": [
     {
      "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Handler": "index.handler",
    "Runtime": "nodejs20.x",
    "Timeout": 900,
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-323399919537-us-east-2",
     "S3Key": "2819175352ad1ce0dae768e83fc328fb70fb5f10b4a8ff0ccbcb791f02b0716d.zip"
    },
    "Role": {
     "Fn::GetAtt": [
      "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB"
   ],
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/Resource",
    "aws:asset:path": "asset.2819175352ad1ce0dae768e83fc328fb70fb5f10b4a8ff0ccbcb791f02b0716d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "ApiF70053CD": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Name": "Api"
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Resource"
   }
  },
  "ApiDeploymentB17BE62De1ef80607a6a7fc552833753cf0092d6": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Automatically created by the RestApi construct",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "DependsOn": [
    "ApiauthOPTIONSC18B26B2",
    "ApiauthPOST8DF5B0DC",
    "Apiauth161C653C",
    "ApidashboardGETEA284596",
    "ApidashboardOPTIONS9B1178C9",
    "ApidashboardA917D38E",
    "ApilogsGET0440CA2D",
    "ApilogsOPTIONSF44380FC",
    "Apilogs3592D9D4",
    "ApiOPTIONS5886EA5D",
    "ApipositionsGETA1BF6530",
    "ApipositionsOPTIONS3BBC1E5D",
    "Apipositions9F406D13",
    "ApistatsGET7896017D",
    "ApistatsOPTIONS281F61C8",
    "Apistats98F7617F",
    "ApitokensGETDEC36D6B",
    "ApitokensOPTIONS395A0C77",
    "Apitokens58868B7F",
    "ApiwalletGETBAC96AF6",
    "ApiwalletOPTIONSCC434475",
    "ApiwalletAE954E48",
    "ApiAuthorizer68095F41"
   ],
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Deployment/Resource"
   }
  },
  "ApiDeploymentStageprod3EB9684E": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "ApiDeploymentB17BE62De1ef80607a6a7fc552833753cf0092d6"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/DeploymentStage.prod/Resource"
   }
  },
  "ApiOPTIONS5886EA5D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/OPTIONS/Resource"
   }
  },
  "Apitokens58868B7F": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "tokens",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/tokens/Resource"
   }
  },
  "ApitokensOPTIONS395A0C77": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "Apitokens58868B7F"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/tokens/OPTIONS/Resource"
   }
  },
  "ApitokensGETApiPermissionInfrastructureStackApiD473DFBAGETtokens242D82DF": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/GET/tokens"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/tokens/GET/ApiPermission.InfrastructureStackApiD473DFBA.GET..tokens"
   }
  },
  "ApitokensGETApiPermissionTestInfrastructureStackApiD473DFBAGETtokensB00F521E": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/GET/tokens"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/tokens/GET/ApiPermission.Test.InfrastructureStackApiD473DFBA.GET..tokens"
   }
  },
  "ApitokensGETDEC36D6B": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiAuthorizer68095F41"
    },
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambdaHandlerCE925BB7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "Apitokens58868B7F"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/tokens/GET/Resource"
   }
  },
  "Apipositions9F406D13": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "positions",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/positions/Resource"
   }
  },
  "ApipositionsOPTIONS3BBC1E5D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "Apipositions9F406D13"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/positions/OPTIONS/Resource"
   }
  },
  "ApipositionsGETApiPermissionInfrastructureStackApiD473DFBAGETpositions769E2C39": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/GET/positions"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/positions/GET/ApiPermission.InfrastructureStackApiD473DFBA.GET..positions"
   }
  },
  "ApipositionsGETApiPermissionTestInfrastructureStackApiD473DFBAGETpositionsC811B945": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/GET/positions"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/positions/GET/ApiPermission.Test.InfrastructureStackApiD473DFBA.GET..positions"
   }
  },
  "ApipositionsGETA1BF6530": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiAuthorizer68095F41"
    },
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambdaHandlerCE925BB7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "Apipositions9F406D13"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/positions/GET/Resource"
   }
  },
  "Apiauth161C653C": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "auth",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/auth/Resource"
   }
  },
  "ApiauthOPTIONSC18B26B2": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "Apiauth161C653C"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/auth/OPTIONS/Resource"
   }
  },
  "ApiauthPOSTApiPermissionInfrastructureStackApiD473DFBAPOSTauth94BC026F": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/POST/auth"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/auth/POST/ApiPermission.InfrastructureStackApiD473DFBA.POST..auth"
   }
  },
  "ApiauthPOSTApiPermissionTestInfrastructureStackApiD473DFBAPOSTauth76A56F16": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/POST/auth"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/auth/POST/ApiPermission.Test.InfrastructureStackApiD473DFBA.POST..auth"
   }
  },
  "ApiauthPOST8DF5B0DC": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambdaHandlerCE925BB7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "Apiauth161C653C"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/auth/POST/Resource"
   }
  },
  "Apistats98F7617F": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "stats",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/stats/Resource"
   }
  },
  "ApistatsOPTIONS281F61C8": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "Apistats98F7617F"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/stats/OPTIONS/Resource"
   }
  },
  "ApistatsGETApiPermissionInfrastructureStackApiD473DFBAGETstats8A3A3801": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/GET/stats"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/stats/GET/ApiPermission.InfrastructureStackApiD473DFBA.GET..stats"
   }
  },
  "ApistatsGETApiPermissionTestInfrastructureStackApiD473DFBAGETstats043902E3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/GET/stats"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/stats/GET/ApiPermission.Test.InfrastructureStackApiD473DFBA.GET..stats"
   }
  },
  "ApistatsGET7896017D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiAuthorizer68095F41"
    },
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambdaHandlerCE925BB7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "Apistats98F7617F"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/stats/GET/Resource"
   }
  },
  "Apilogs3592D9D4": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "logs",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/logs/Resource"
   }
  },
  "ApilogsOPTIONSF44380FC": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "Apilogs3592D9D4"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/logs/OPTIONS/Resource"
   }
  },
  "ApilogsGETApiPermissionInfrastructureStackApiD473DFBAGETlogs6C721593": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/GET/logs"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/logs/GET/ApiPermission.InfrastructureStackApiD473DFBA.GET..logs"
   }
  },
  "ApilogsGETApiPermissionTestInfrastructureStackApiD473DFBAGETlogs8AE73C3D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/GET/logs"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/logs/GET/ApiPermission.Test.InfrastructureStackApiD473DFBA.GET..logs"
   }
  },
  "ApilogsGET0440CA2D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiAuthorizer68095F41"
    },
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambdaHandlerCE925BB7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "Apilogs3592D9D4"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/logs/GET/Resource"
   }
  },
  "ApiwalletAE954E48": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "wallet",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/wallet/Resource"
   }
  },
  "ApiwalletOPTIONSCC434475": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "ApiwalletAE954E48"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/wallet/OPTIONS/Resource"
   }
  },
  "ApiwalletGETApiPermissionInfrastructureStackApiD473DFBAGETwalletC2CF69E9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/GET/wallet"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/wallet/GET/ApiPermission.InfrastructureStackApiD473DFBA.GET..wallet"
   }
  },
  "ApiwalletGETApiPermissionTestInfrastructureStackApiD473DFBAGETwallet4F6B0325": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/GET/wallet"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/wallet/GET/ApiPermission.Test.InfrastructureStackApiD473DFBA.GET..wallet"
   }
  },
  "ApiwalletGETBAC96AF6": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiAuthorizer68095F41"
    },
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambdaHandlerCE925BB7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "ApiwalletAE954E48"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/wallet/GET/Resource"
   }
  },
  "ApidashboardA917D38E": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "ApiF70053CD",
      "RootResourceId"
     ]
    },
    "PathPart": "dashboard",
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/dashboard/Resource"
   }
  },
  "ApidashboardOPTIONS9B1178C9": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'",
        "method.response.header.Access-Control-Allow-Origin": {
         "Fn::Join": [
          "",
          [
           "'https://",
           {
            "Fn::GetAtt": [
             "Distribution830FAC52",
             "DomainName"
            ]
           },
           "'"
          ]
         ]
        },
        "method.response.header.Vary": "'Origin'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'",
        "method.response.header.Access-Control-Allow-Credentials": "'true'"
       },
       "ResponseTemplates": {
        "application/json": "#set($origin = $input.params().header.get(\"Origin\"))\n#if($origin == \"\")\n  #set($origin = $input.params().header.get(\"origin\"))\n#end\n#if($origin == \"http://localhost:3000\")\n  #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin)\n#end"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Vary": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Allow-Credentials": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "ApidashboardA917D38E"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/dashboard/OPTIONS/Resource"
   }
  },
  "ApidashboardGETApiPermissionInfrastructureStackApiD473DFBAGETdashboard3F1448DD": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/",
       {
        "Ref": "ApiDeploymentStageprod3EB9684E"
       },
       "/GET/dashboard"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/dashboard/GET/ApiPermission.InfrastructureStackApiD473DFBA.GET..dashboard"
   }
  },
  "ApidashboardGETApiPermissionTestInfrastructureStackApiD473DFBAGETdashboard009348F0": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ApiLambdaHandlerCE925BB7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-2:323399919537:",
       {
        "Ref": "ApiF70053CD"
       },
       "/test-invoke-stage/GET/dashboard"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/dashboard/GET/ApiPermission.Test.InfrastructureStackApiD473DFBA.GET..dashboard"
   }
  },
  "ApidashboardGETEA284596": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "COGNITO_USER_POOLS",
    "AuthorizerId": {
     "Ref": "ApiAuthorizer68095F41"
    },
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "ApiLambdaHandlerCE925BB7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "ApidashboardA917D38E"
    },
    "RestApiId": {
     "Ref": "ApiF70053CD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/Api/Default/dashboard/GET/Resource"
   }
  },
  "ApiAuthorizer68095F41": {
   "Type": "AWS::ApiGateway::Authorizer",
   "Properties": {
    "IdentitySource": "method.request.header.Authorization",
    "Name": "InfrastructureStackApiAuthorizer1D1B8B6F",
    "ProviderARNs": [
     {
      "Fn::GetAtt": [
       "UserPool6BA7E5F2",
       "Arn"
      ]
     }
    ],
    "RestApiId": {
     "Ref": "ApiF70053CD"
    },
    "Type": "COGNITO_USER_POOLS"
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/ApiAuthorizer/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/21R0W7bMAz8lr4rWtoCA/aYuihQYFsDd3sOZIlxmchiIFINMsH/Pkh2mhToE+/EE3U83enbH0u9vDFHXli3X3jsdH4VY/fKHHmT+V7nh2T3IKrZhhlNZU0e7elyPPOJPBiGUVlPyW0jBdH5JWKPYWUtMD87CIJSLzdF81Q0XyoekSVilwQpFPk1H5WlPqCQzn8Z4prIF8kHPoPGIwS5bk0no3KnYAZync5/TOehSCoYlTdD58wmkIMd69+1PKVgqw80g84tTRdqvYQxoVHx/cYwg7BelTIP1LnZho85RQ5xQOa6jaee9U/qW5CyPQVlDtgbgaM56dwCy+qA9ckZPsLB02mYl7tir2L6am4CLTClaKH8ivoF8kauNGd07s6TZzwlew6MV0neKOI/iEV2YeOomsRCw9dTPrXWkd7RQaw2airFHob+k4WXJIckoyrR6x1/e79b6tvvenmzY8RFTEFwAN1O9T+yjwY0wAIAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "InfrastructureStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "ApiEndpoint4F160690": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ApiF70053CD"
      },
      ".execute-api.us-east-2.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ApiDeploymentStageprod3EB9684E"
      },
      "/"
     ]
    ]
   }
  },
  "CloudFrontDomain": {
   "Value": {
    "Fn::GetAtt": [
     "Distribution830FAC52",
     "DomainName"
    ]
   }
  },
  "UserPoolId": {
   "Value": {
    "Ref": "UserPool6BA7E5F2"
   }
  },
  "UserPoolClientId": {
   "Value": {
    "Ref": "UserPoolClient2F5918F7"
   }
  },
  "ApiEndpoint": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "ApiF70053CD"
      },
      ".execute-api.us-east-2.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "ApiDeploymentStageprod3EB9684E"
      },
      "/"
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}